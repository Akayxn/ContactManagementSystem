import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;

public class ContactSystem {
    private static ArrayList<Contacts> contactList = new ArrayList<>();
    public static void main(String[] args) {
        loadContacts(); //loading the existing contacts at startups
        boolean runcontact = true;
        Scanner scanner = new Scanner(System.in);
        while(runcontact){
            System.out.println("1. Add Contacts.");
            System.out.println("2. View Contacts.");
            System.out.println("3. Remove Contacts.");
            System.out.println("4. Update Contacts.");
            System.out.println("5. Exit the Program");
            System.out.print("Enter your choice:");
            int choice = scanner.nextInt();
            switch(choice){
                case 1:
                    addContact(scanner);
                    break;
                case 2:
                    viewContact();
                    break;
                case 3:
                    removeContact(scanner);
                    break;
                case 4:
                    updateContact(scanner);
                    break;
                case 5:
                    runcontact = false;
                    System.out.println("You have exited the program.");
                    break;
                default:
                    System.out.println("Enter a valid choice!");
                    break;
            }


        }

        scanner.close();
    }




    private static  void addContact(Scanner scanner){
        System.out.print("Enter the contact's id: ");
        int id = scanner.nextInt();
        scanner.nextLine(); //consume the extra line made by nextint;

        System.out.print("Enter the contact's name: ");
        String name = scanner.nextLine();

        System.out.print("Enter the contact's phone no: ");
        long phoneNumber = scanner.nextLong();

        scanner.nextLine(); // to take up the extra line generated by the nextLong().
        System.out.print("Enter the contact's email:");
        String email = scanner.nextLine();

        Contacts contacts = new Contacts(id,name,phoneNumber,email);
        contactList.add(contacts);
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("Contacts.txt"));
            writer.write(contacts.toString() + "\n");
            System.out.println("Contact Successfully added.");
            writer.close();
        } catch (IOException e) {
            System.out.println("Error Saving the Contact " + e.getMessage());
        }

    }

    private static void viewContact() {
        if(contactList.isEmpty()){
            System.out.println("No contacts available.");
            return;
        }

        System.out.println("\nNow Viewing the Contacts");
        for(Contacts contacts : contactList){
            System.out.println("Id: " + contacts.getId() + ",Name: " + contacts.getName() + ",Phone Number: " + contacts.getPhoneNumber() + ", Email: " + contacts.getEmail());
        }

    }


    private static void removeContact(Scanner scanner) {
        viewContact();

        if(contactList.isEmpty()){
            System.out.println("No Contacts Availabe to remove.");
            return;} // returns nothing if its empty

        System.out.print("Enter the id of the contact you want to remove:");
        int contactoRemove = scanner.nextInt();

        for(int i = 0;i< contactList.size();i++){
            if(contactList.get(i).getId()==(contactoRemove)){
                contactList.remove(i);
                saveallContacts(); // saves the current info in the text file.
                System.out.println("Contact Successfully removed.");
                return;
            }
        }

        System.out.println("Contact not Found.");

    }

    private static void updateContact(Scanner scanner){
        viewContact();
        if(contactList.isEmpty()){
            return;}

        System.out.print("Enter the id of the contact to update:");
        int contactToUpdate = scanner.nextInt();
        scanner.nextLine(); //consume the extra line created by nextInt();
        for(Contacts contact:contactList){
            if(contact.getId()==contactToUpdate){
                System.out.print("Enter new name (Leave empty to keep current):");
                String name = scanner.nextLine();
                if(!name.isEmpty()){
                    contact.setName(name);
                }


                System.out.print("Enter new phone number (Leave empty to keep current):");
                String phoneNumber = scanner.nextLine();
                if(!phoneNumber.isEmpty()){
                    long numberToUpdate = Long.parseLong(phoneNumber); // changing the Strings to long.
                    contact.setPhoneNumber(numberToUpdate);
                }

                System.out.print("Enter new email (Leave empty to keep current):");
                String email = scanner.nextLine();
                if(!email.isEmpty()){
                    contact.setEmail(email);
                }

                saveallContacts();

            }
        }


    }

        // loads the contacts
     private static void loadContacts(){

         try {
             BufferedReader reader = new BufferedReader(new FileReader("Contacts.txt"));
             String line;
             while((line = reader.readLine()) !=null){
                 String[] parts = line.split(",");
                 if(parts.length == 4){
                     Contacts contact = new Contacts(Integer.parseInt(parts[0]),parts[1],Long.parseLong(parts[2]),parts[3]);
                     contactList.add(contact);
                 }
             }
         } catch (FileNotFoundException e) {
             throw new RuntimeException(e);
         } catch (IOException e) {
             throw new RuntimeException(e);
         }

     }


    private static void saveallContacts(){
        try {
            FileWriter fileWriter = new FileWriter("Contacts.txt");

            for(Contacts contact : contactList){
                fileWriter.write(contact.toString() + "\n");
            }
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }



}
